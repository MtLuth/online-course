"use strict";
/* eslint-disable
   @typescript-eslint/restrict-template-expressions,
   @typescript-eslint/method-signature-style,
   no-template-curly-in-string
*/
Object.defineProperty(exports, "__esModule", { value: true });
// pluralize
function p(word, num) {
    return num === 1 ? word : `${word}s`;
}
const messages = {
    minLowercase: ({ path, length }) => `${path} must contain at least ${length} lowercase ${p('letter', length)}`,
    minUppercase: ({ path, length }) => `${path} must contain at least ${length} uppercase ${p('letter', length)}`,
    minNumbers: ({ path, length }) => `${path} must contain at least ${length} ${p('number', length)}`,
    minSymbols: ({ path, length }) => `${path} must contain at least ${length} ${p('symbol', length)}`,
    maxRepeating: ({ path, length }) => `${path} must not contain sequences of more than ${length} repeated characters`,
    minWords: ({ path, length }) => `${path} must contain at least ${length} ${p('word', length)}`,
};
function isNullOrUndefined(value) {
    return value === null || value === undefined;
}
function setup({ setLocale, defaultLocale, addMethod, string }) {
    setLocale({ string: messages });
    const locale = defaultLocale.string;
    addMethod(string, 'minLowercase', function minLowercase(length = 1, message = locale === null || locale === void 0 ? void 0 : locale.minLowercase) {
        return this.test({
            message,
            name: 'minLowercase',
            exclusive: true,
            params: { length },
            test(value) {
                return isNullOrUndefined(value) || (value.match(/[a-z]/g) || []).length >= length;
            },
        });
    });
    addMethod(string, 'minUppercase', function minUppercase(length = 1, message = locale === null || locale === void 0 ? void 0 : locale.minUppercase) {
        return this.test({
            message,
            name: 'minUppercase',
            exclusive: true,
            params: { length },
            test(value) {
                return isNullOrUndefined(value) || (value.match(/[A-Z]/g) || []).length >= length;
            },
        });
    });
    addMethod(string, 'minNumbers', function minNumbers(length = 1, message = locale === null || locale === void 0 ? void 0 : locale.minNumbers) {
        return this.test({
            message,
            name: 'minNumbers',
            exclusive: true,
            params: { length },
            test(value) {
                return isNullOrUndefined(value) || (value.match(/[0-9]/g) || []).length >= length;
            },
        });
    });
    addMethod(string, 'minSymbols', function minSymbols(length = 1, message = locale === null || locale === void 0 ? void 0 : locale.minSymbols) {
        return this.test({
            message,
            name: 'minSymbols',
            exclusive: true,
            params: { length },
            test(value) {
                return isNullOrUndefined(value) || (value.match(/[^a-zA-Z0-9\s]/g) || []).length >= length;
            },
        });
    });
    addMethod(string, 'maxRepeating', function maxRepeating(length = 2, message = locale === null || locale === void 0 ? void 0 : locale.maxRepeating) {
        return this.test({
            message,
            name: 'maxRepeating',
            exclusive: true,
            params: { length },
            test(value) {
                return isNullOrUndefined(value) || !new RegExp(`(.)\\1{${length},}`).test(value);
            },
        });
    });
    addMethod(string, 'minWords', function minWords(length = 2, message = locale === null || locale === void 0 ? void 0 : locale.minWords) {
        return this.test({
            message,
            name: 'minWords',
            exclusive: true,
            params: { length },
            test(value) {
                return isNullOrUndefined(value) || value.split(' ').filter(v => !!v && /[a-zA-Z0-9]/.test(v)).length >= length;
            },
        });
    });
    addMethod(string, 'password', function password() {
        return this
            .min(8)
            .max(250)
            .minLowercase(1)
            .minUppercase(1)
            .minNumbers(1)
            .minSymbols(1);
    });
} // setup()
exports.default = setup;
module.exports = setup;
//# sourceMappingURL=index.js.map